"""
Django settings for model_agency project.

Generated by 'django-admin startproject' using Django 4.1.

For more information on this file, see
https://docs.djangoproject.com/en/4.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.1/ref/settings/
"""
import logging
import sys

from pathlib import Path

try:
    from decouple import config
except ImportError:
    logging.info("python-decouple is not installed, using os.environ")
    import os

    config = os.environ.get

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent.parent

ALLOWED_HOSTS = []

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    "django_celery_beat",
    "corsheaders",
    "rest_framework",
    "phonenumber_field",
    "drf_spectacular",
    "model",
    "contact",
    "newsletter",
    "core"
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

INTERNAL_IPS = []

# Cookie key name to store when user has subscribed to newsletter
COOKIE_NEWS_SUBSCRIBED_EMAIL = "subscribed_email"

# cookie user subscribed to newsletter expiry 1 year
COOKIE_EXPIRE_SUBSCRIBED_DATA = 365 * 24 * 60 * 60

# send newsletters update to subscribed users every specified time in days
# send every num of days relative to when user subscribed
NEWSLETTER_EMAIL_EVERY_NUM_DAY = 7

# Celery beat schedule. In what intervals we should run
# celery task to send users mails about new newsletters
# created in range NEWSLETTER_EMAIL_EVERY_NUM_DAY
CELERY_CHECK_NEWSLETTERS = 1  # run celery task every day

# Celery will check schedule every 12 hour (43200 sec)
CELERY_MAX_BEAT_INTERVAL_SECONDS = 43200

TESTING = "test" in sys.argv
# determines in which environment we are
# DJANGO_ENV could have values of development, production, staging
DJANGO_ENV = config("DJANGO_ENV")

if not TESTING and DJANGO_ENV != "production":
    # if we are not testing or we are in development or production mode
    # we can use debug_toolbar
    INSTALLED_APPS = [
        *INSTALLED_APPS,
        "debug_toolbar",
    ]

    MIDDLEWARE = [
        "debug_toolbar.middleware.DebugToolbarMiddleware",
        *MIDDLEWARE
    ]

    INTERNAL_IPS = [
        "127.0.0.1",
        *INTERNAL_IPS
    ]

ROOT_URLCONF = 'model_agency.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'model_agency.wsgi.application'


# Password validation
# https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

AUTH_USER_MODEL = "model.User"


# Internationalization
# https://docs.djangoproject.com/en/4.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.1/howto/static-files/

STATIC_URL = 'static/'

MEDIA_ROOT = BASE_DIR / "media"

# Default primary key field type
# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

REST_FRAMEWORK = {
    "DEFAULT_SCHEMA_CLASS": "drf_spectacular.openapi.AutoSchema",
    "DEFAULT_PAGINATION_CLASS": "paginations.CustomPagination",
    "DEFAULT_THROTTLE_CLASSES": [
        "rest_framework.throttling.AnonRateThrottle",
    ],
    "DEFAULT_THROTTLE_RATES": {
        "anon": "3000/day"
    },
}

LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "verbose": {
            "format": (
                "{pathname}: [{asctime}] {levelname}."
                " Logger '{name}' '{message}'"
            ),
            "style": "{",
            "date_fmt": "%d/%b/%Y %H:%M:%S"
        },
        "simple": {
            "format": "{pathname} {message}",
            "style": "{"
        }
    },
    "filters": {
        "debug_true": {
            "()": "django.utils.log.RequireDebugTrue"
        },
        "debug_false": {
            "()": "django.utils.log.RequireDebugFalse"
        },
    },
    "handlers": {
        "console": {  # handler without any filters
            "class": "logging.StreamHandler",
            "level": "DEBUG",
            "formatter": "simple",
        },
        "console_debug_true": {  # handler when DEBUG is True
            "class": "logging.StreamHandler",
            "level": "DEBUG",
            "formatter": "simple",
            "filters": ["debug_true"]
        },
        "console_debug_false": {  # handler when DEBUG is False
            "class": "logging.StreamHandler",
            "level": "INFO",
            "formatter": "verbose",
            "filters": ["debug_false"]
        },
        # Writing Model app logs to files, which
        # are rotating every midnight, total number of
        # files are `backupCount`
        "file_model_debug_false": {
            "class": "logging.handlers.TimedRotatingFileHandler",
            "level": "INFO",
            "filename": "logs/model_app/model.log",
            "backupCount": 5,
            "when": "midnight",
            "formatter": "verbose",
            "filters": ["debug_false"]
        },
        # Writing any mail activity for exp. in contact app
        # or newsletter mails logs to this handler
        "mail_debug_false": {
            "class": "logging.handlers.RotatingFileHandler",
            "level": "INFO",
            "filename": "logs/mails_logs/mails.log",
            "backupCount": 7,
            "formatter": "simple",
            "filters": ["debug_false"]
        }
    },
    "loggers": {
        "model.tests": {
            "level": "INFO",
            "handlers": ["console"]
        },
        "model_app": {
            # Some logs message are DEBUG and some are INFO
            # that why we are using 3 handlers during development
            # and production, handlers will determine where to go
            # base on level of severity
            "handlers": [
                "console_debug_true",
                "console_debug_false",
                "file_model_debug_false"
            ],
            "level": "DEBUG"
        },
        "mail_logging": {
            # this logger for all mails activity
            "handlers": [
                "console_debug_true",
                "mail_debug_false"
            ],
            "level": "DEBUG"
        }
    }
}
